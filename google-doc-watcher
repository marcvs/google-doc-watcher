#!/usr/bin/env python 

import urllib2
import fileinput
from re import search
from datetime import datetime
import hashlib
import os
import argparse
import glob
from sys import stdout
import smtplib
import subprocess
# some timezone stuff
import pytz


defaultpath = os.getenv("HOME")+"/google-doc-watcher"


parser = argparse.ArgumentParser(description='google-doc-watcher')
parser.add_argument('--verbose','-v', dest='verbose', action='count',
					default=0)
parser.add_argument('--config','-c', dest='configfile',
					default=os.getenv("HOME")+"/.google-doc-watcherrc")
parser.add_argument('--email','-e', dest='email',
					default="marcus@hardt-it.de")
parser.add_argument('--outputdir','-o', dest='basedir',
					default=defaultpath)
					#default=os.getenv("HOME")+"/.google-doc-downloader")
parser.add_argument('--width','-w', dest='mailOutputWidth',
					default=66)
parser.add_argument('--no-reflow', dest='mailOutputReflow',
					action='store_false', default=True)
parser.add_argument('--colordiffOptions', dest='colordiffOptions',
					default='-u7')
parser.add_argument('--ansi2html', dest='path_ansitohtml',
					default=defaultpath+"/ansi2html.sh")
parser.add_argument('--smtp-user', '-u', dest='smtpUser',
					default="")
parser.add_argument('--smtp-pass', '-p', dest='smtpPass',
					default="")
parser.add_argument('--smtp-host', '-s', dest='smtpHost',
					default="")
parser.add_argument('--quiet', '-q', dest='quiet', action='store_true',
					default=False)

args = parser.parse_args()

startupCwd = os.getcwd()
os.chdir(args.basedir)

def downloadFromGoogleDoc(resourceId, fileFormat, outputBaseFileWithDate):
	outputFile		= outputBaseFileWithDate+"."+fileFormat

	req=urllib2.Request("https://docs.google.com/feeds/download/documents/export/Export?id="+resourceId+"&exportFormat="+fileFormat)

	googledoc = urllib2.urlopen(req)

	file = open(outputFile, 'w+')
	file.write(googledoc.read())
	file.close()
	if args.verbose:
		for file in (glob.glob(args.basedir+"/"+outputBaseFileWithDate+"*")):
			if not args.quiet:
				print "=> %s" %file

def  ANewVersionWasDownloaded(outputBaseFile):
	retVal = True
	fileFormat = "txt"
	fileversions = (glob.glob(args.basedir+"/"+outputBaseFile+"*"+fileFormat))
	fileversions.sort()

	hashes = [(fversion, hashlib.md5(open(fversion, 'rb').read()).hexdigest()) for fversion in fileversions]
	previous_fileversion = ""
	previous_hashvalue	 = ""
	pre_previous_fileversion = ""
	for (fileversion, hashvalue) in hashes:
		if args.verbose:
			if not args.quiet:
				stdout.write (("\n%s : %s") % (fileversion, hashvalue))
		if (previous_hashvalue == hashvalue):
			os.remove (fileversion)
			retVal = False
		else:
			pre_previous_fileversion = previous_fileversion
			previous_fileversion = fileversion
			previous_hashvalue	 = hashvalue
	return retVal, os.path.basename(pre_previous_fileversion)

def sendMail(FROM, TO, SUBJECT, CONTENT):
	try:
		now = datetime.now(tz=pytz.timezone(os.getenv("TZ")))
	except:
		now = datetime.now(tz=pytz.timezone('CET'))

	if args.smtpHost == "":
		print "Error: smtp host not configured, cannot send email. Use the --smtp-host parameter"

	else:
		now = now.strftime("%a, %d %b %Y %H:%M:%S %z")

		# Import the email modules we'll need
		from email.mime.text import MIMEText
		from email.mime.multipart import MIMEMultipart

		htmlcontent = MIMEText(CONTENT, "html")
		msg = MIMEMultipart()

		msg['Subject'] = SUBJECT
		msg['From'] = FROM
		msg['To'] = TO
		msg['Date'] = now
		msg.preamble = "This is an email"
		msg.attach(htmlcontent)

		# Send the message via our own SMTP server, but don't include the
		# envelope header.
		s = smtplib.SMTP(args.smtpHost)
		if (args.smtpUser !=0) and (args.smtpPass !=0):
			s.login(args.smtpUser, args.smtpPass)
		try:
			if s.sendmail(FROM, TO , msg.as_string()):
				if not args.quiet:
					print "email(s) sent"
		except:
			print ("Error sending email, please check your settings")
		s.quit()

def shellcall(commandline):
	tmpout = "/tmp/google-doc-downloader-"+os.getpid().__str__()+"out"
	tmperr = "/tmp/google-doc-downloader-"+os.getpid().__str__()+"err"

	retval = subprocess.call(commandline, shell=True,
					stdout = open(tmpout, "w"), stderr = open(tmperr, "w"))

	output = open(tmpout, "r").read()
	errors = open(tmperr, "r").read()

	if not args.verbose:
		os.remove (tmpout)
		os.remove (tmperr)

	return retval, output, errors

def  mailLatestDiff(outputBaseFile, newFile, oldFile, emails):
	fileFormat = 'txt'
	if not args.quiet:
		print "\nEmailing diffs for %s to" %(outputBaseFile)
	width = str(args.mailOutputWidth)

	tmp1 = "/tmp/google-doc-downloader-"+os.getpid().__str__()+outputBaseFile+"-old"
	tmp2 = "/tmp/google-doc-downloader-"+os.getpid().__str__()+outputBaseFile+"-new"

	if args.mailOutputReflow:
		shellcall ("cat "+oldFile+" | fold -s -w "+width+" > "+tmp1)
		shellcall ("cat "+newFile+" | fold -s -w "+width+" > "+tmp2)
	else:
		shellcall ("cat "+oldFile+" > "+tmp1)
		shellcall ("cat "+newFile+" > "+tmp2)

	(retval, output, errors) = shellcall ("colordiff "+args.colordiffOptions+" "+tmp1+" "+tmp2+" | "+ args.path_ansitohtml)

	if not args.verbose:
		os.remove (tmp1)
		os.remove (tmp2)

	for email in emails.split(":"):
		if not args.quiet:
			print ("    "+email)
		sendMail ("marcus@hardt-it.de", email, "Updates on %s" % outputBaseFile, output)


def downloadFilesFromRc():
	now = datetime.now()
	now = now.strftime("%Y-%m-%d-%H:%M")
	if not args.quiet:
		print ("Checking for updates")
	for line in fileinput.input(args.configfile):
		# read line of config file
		if search ("#", line):
			continue
		if search ("^$", line):
			continue

		entries = line.split ()
		try:
			resourceId		= entries[0]
			outputBaseFile	= entries[1]
			fileFormats		= entries[2]
			emails			= entries[3]
		except IndexError:
			print ("""
Error Parsing the config:
You have probably not provided enough options in the config file. The template is as follows:

# google-doc-id                 outputfile      fileFormat # the txt version is always downloaded
1qtjlH2NzsdfsSD1wJ9nz_NmddVHIGKS9BdDRqP1eOe4    important-repor        pdf:doc:odt:docx:rtf:html jon@doe.org:foo@bar.com:bart@simpson.gov
1F8PI8q0KxtasdfsdfsdfRSDFSDFCvLwz4wTfcKmNY_8    example-doc             docx jon@doe.org

		""")

		# derive config based values
		outputBaseFileWithDate=outputBaseFile+"--"+now

		if not args.quiet:
			stdout.write ("%s: " % (outputBaseFile))
			stdout.flush()

		# download txt version
		downloadFromGoogleDoc(resourceId, 'txt', outputBaseFileWithDate)

		# check dupes
		(newFileAvailable, secondLastFileVersion) = ANewVersionWasDownloaded(outputBaseFile)
		if newFileAvailable:
			# if not dupe: download other formats
			if not args.quiet:
				stdout.write("Fetching new version: ")
			for fileFormat in fileFormats.split(":"):
				if not args.quiet:
					stdout.write ("[%s] " % fileFormat); stdout.flush()
				downloadFromGoogleDoc(resourceId, fileFormat, outputBaseFileWithDate)

			# send email with latest diff
			newFile = outputBaseFileWithDate+".txt"
			oldFile = secondLastFileVersion
			if (newFile != oldFile) & (oldFile != ""):
				mailLatestDiff(outputBaseFile, newFile, oldFile, emails)
		else:
			if not args.quiet:
				stdout.write ("No changes")


		if not args.quiet:
			print ("")

downloadFilesFromRc()

fnamelst = []
fnamelst.append("d4.2--2015-07-30-15:26.txt")

os.chdir(startupCwd)






#wget -O 2nd.odt https://docs.google.com/feeds/download/documents/export/Export?id=$resourceId&exportFormat=odt
